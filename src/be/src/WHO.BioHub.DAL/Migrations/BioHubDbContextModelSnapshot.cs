// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WHO.BioHub.DAL;

#nullable disable

namespace WHO.BioHub.DAL.Migrations
{
    [DbContext(typeof(BioHubDbContext))]
    partial class BioHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WHO.BioHub.Models.Models.Annex2OfSMTA2Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("FlagPresetValue")
                        .HasColumnType("bit");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PointNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Selectable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Current")
                        .HasDatabaseName("IX_Current");

                    b.ToTable("Annex2OfSMTA2Conditions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BioHubFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BSLLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublicFacing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .HasDatabaseName("IX_Abbreviation");

                    b.HasIndex("BSLLevelId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Id");

                    b.HasIndex("IsPublicFacing")
                        .HasDatabaseName("IX_IsPublicFacing");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("BioHubFacilities");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BioHubFacilityHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BSLLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublicFacing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BSLLevelId");

                    b.HasIndex("BioHubFacilityId")
                        .HasDatabaseName("IX_BioHubFacilityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LastOperationDate")
                        .HasDatabaseName("IX_LastOperationDate");

                    b.ToTable("BioHubFacilitiesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BiosafetyChecklistOfSMTA2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("FlagPresetValue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParentCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Selectable")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnParentValue")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Current")
                        .HasDatabaseName("IX_Current");

                    b.ToTable("BiosafetyChecklistOfSMTA2s");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimateDateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberOfInnerPackagingAndSize")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RequestDateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipmentReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TemperatureTransportCondition")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalNumberOfVials")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("MaterialProductId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("TransportModeId");

                    b.HasIndex("WorklistFromBioHubItemId");

                    b.HasIndex("WorklistToBioHubItemId");

                    b.ToTable("BookingForms");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormCourierUser", b =>
                {
                    b.Property<Guid?>("BookingFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookingFormId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingFormCourierUsers");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormCourierUserHistory", b =>
                {
                    b.Property<Guid?>("BookingFormHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookingFormHistoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingFormCourierUsersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDelivery")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimateDateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumberOfInnerPackagingAndSize")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RequestDateOfPickup")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipmentReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TemperatureTransportCondition")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TotalNumberOfVials")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("MaterialProductId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("TransportModeId");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.HasIndex("WorklistToBioHubHistoryItemId");

                    b.ToTable("BookingFormsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormPickupUser", b =>
                {
                    b.Property<Guid?>("BookingFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookingFormId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingFormPickupUsers");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormPickupUserHistory", b =>
                {
                    b.Property<Guid?>("BookingFormHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("BookingFormHistoryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingFormPickupUsersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BSLLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_Code");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("BSLLevels");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CollectedSpecimenType", b =>
                {
                    b.Property<Guid?>("MaterialLaboratoryAnalysisInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecimenTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialLaboratoryAnalysisInformationId", "SpecimenTypeId");

                    b.HasIndex("SpecimenTypeId");

                    b.ToTable("CollectedSpecimenTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CollectedSpecimenTypeHistory", b =>
                {
                    b.Property<Guid?>("MaterialLaboratoryAnalysisInformationHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecimenTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialLaboratoryAnalysisInformationHistoryId", "SpecimenTypeId");

                    b.HasIndex("SpecimenTypeId");

                    b.ToTable("CollectedSpecimenTypesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("GmtHour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("GmtMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Uncode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Id");

                    b.HasIndex("Iso2")
                        .HasDatabaseName("IX_Iso2");

                    b.HasIndex("Iso3")
                        .HasDatabaseName("IX_Iso3");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.HasIndex("Uncode")
                        .IsUnique()
                        .HasDatabaseName("IX_Uncode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WHOAccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CourierHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WHOAccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CourierId")
                        .HasDatabaseName("IX_CourierId");

                    b.HasIndex("LastOperationDate")
                        .HasDatabaseName("IX_LastOperationDate");

                    b.ToTable("CouriersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CultivabilityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("CultivabilityTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Base64String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalDocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Approved")
                        .HasDatabaseName("IX_Approved");

                    b.HasIndex("BioHubFacilityId")
                        .HasDatabaseName("IX_BioHubFacilityId");

                    b.HasIndex("IsDocumentFile")
                        .HasDatabaseName("IX_IsDocumentFile");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("IX_LaboratoryId");

                    b.HasIndex("OriginalDocumentTemplateId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Type");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("IX_ParentId");

                    b.HasIndex("UploadedById");

                    b.ToTable("DocumentTemplates");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.GeneticSequenceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_Code");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("GeneticSequenceDatas");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.InternationalTaxonomyClassification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("InternationalTaxonomyClassifications");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.IsolationHostType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("IsolationHostTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.IsolationTechniqueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("IsolationTechniqueTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BSLLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublicFacing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation")
                        .HasDatabaseName("IX_Abbreviation");

                    b.HasIndex("BSLLevelId");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsPublicFacing")
                        .HasDatabaseName("IX_IsPublicFacing");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.LaboratoryHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("BSLLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublicFacing")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BSLLevelId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LaboratoryId")
                        .HasDatabaseName("IX_LaboratoryId");

                    b.HasIndex("LastOperationDate")
                        .HasDatabaseName("IX_LastOperationDate");

                    b.ToTable("LaboratoriesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddedAliquots")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AgeValidation")
                        .HasColumnType("int");

                    b.Property<int?>("BHFShareReadiness")
                        .HasColumnType("int");

                    b.Property<string>("BrandOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BrandOfTransportMediumComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("BrandOfTransportMediumValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectionDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CollectionDateValidation")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultivabilityTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("CultivabilityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CultivabilityTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("CulturingCellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CulturingCellLineComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingCellLineValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingPassagesNumber")
                        .HasColumnType("int");

                    b.Property<string>("CulturingPassagesNumberComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingPassagesNumberValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingResult")
                        .HasColumnType("int");

                    b.Property<string>("CulturingResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CulturingResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturingResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingResultValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentNumberOfVials")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseAccessionId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DatabaseAccessionIdComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DatabaseAccessionIdValidation")
                        .HasColumnType("int");

                    b.Property<int?>("DatabaseUploadedBy")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseUploadedByComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DatabaseUploadedByValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBMEPPReceipt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBMEPPReceiptComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DateOfBMEPPReceiptValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DescriptionValidation")
                        .HasColumnType("int");

                    b.Property<string>("FacilityGSD")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FacilityGSDComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FacilityGSDValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FreezingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreezingDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FreezingDateValidation")
                        .HasColumnType("int");

                    b.Property<bool>("GMO")
                        .HasColumnType("bit");

                    b.Property<string>("GMOComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GMOValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDAnalysisResult")
                        .HasColumnType("int");

                    b.Property<string>("GSDAnalysisResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("GSDAnalysisResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDAnalysisResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDAnalysisResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDAnalysisResultValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GSDUploadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDUploadingDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDUploadingDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDUploadingStatus")
                        .HasColumnType("int");

                    b.Property<string>("GSDUploadingStatusComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDUploadingStatusValidation")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GenderComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GenderValidation")
                        .HasColumnType("int");

                    b.Property<string>("GeneticSequenceDataComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("GeneticSequenceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("GeneticSequenceDataValidation")
                        .HasColumnType("int");

                    b.Property<string>("Genotype")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GenotypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GenotypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("Infectivity")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("InfectivityComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("InfectivityValidation")
                        .HasColumnType("int");

                    b.Property<string>("InternationalTaxonomyClassificationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("InternationalTaxonomyClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InternationalTaxonomyClassificationValidation")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPast")
                        .HasColumnType("bit");

                    b.Property<string>("IsolationHostTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("IsolationHostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IsolationHostTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("IsolationTechniqueTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("IsolationTechniqueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IsolationTechniqueTypeValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAliquotsAdditionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastOperationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lineage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LineageComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LineageValidation")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LocationValidation")
                        .HasColumnType("int");

                    b.Property<bool>("ManualCreation")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialCollectedSpecimenTypesComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaterialCollectedSpecimenTypesValidation")
                        .HasColumnType("int");

                    b.Property<string>("MaterialGSDInfoComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaterialGSDInfoValidation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("NameValidation")
                        .HasColumnType("int");

                    b.Property<string>("OriginalGeneticSequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalGeneticSequenceComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OriginalGeneticSequenceValidation")
                        .HasColumnType("int");

                    b.Property<string>("OriginalProductTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OriginalProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OriginalProductTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("OwnerBioHubFacilityComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerBioHubFacilityValidation")
                        .HasColumnType("int");

                    b.Property<string>("Pathogen")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PathogenComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PathogenValidation")
                        .HasColumnType("int");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatientStatusComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PatientStatusValidation")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("ProductionCellLine")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductionCellLineComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductionCellLineValidation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProviderBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProviderLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PublicShare")
                        .HasColumnType("int");

                    b.Property<int?>("QualityControlResult")
                        .HasColumnType("int");

                    b.Property<string>("QualityControlResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("QualityControlResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QualityControlResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("QualityControlResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("QualityControlResultValidation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReferenceNumberComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReferenceNumberValidation")
                        .HasColumnType("int");

                    b.Property<string>("SampleId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SampleIdComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SampleIdValidation")
                        .HasColumnType("int");

                    b.Property<string>("Serotype")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SerotypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SerotypeValidation")
                        .HasColumnType("int");

                    b.Property<double?>("ShipmentAmount")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentAmountComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentAmountValidation")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentMaterialCondition")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentMaterialConditionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ShipmentMaterialConditionNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ShipmentMaterialConditionValidation")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentNumberOfVials")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentNumberOfVialsComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentNumberOfVialsValidation")
                        .HasColumnType("int");

                    b.Property<double?>("ShipmentTemperature")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentTemperatureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentTemperatureValidation")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentUnitOfMeasureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ShipmentUnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ShipmentUnitOfMeasureValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrainDesignation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StrainDesignationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("StrainDesignationValidation")
                        .HasColumnType("int");

                    b.Property<string>("SuspectedEpidemiologicalOriginComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("SuspectedEpidemiologicalOriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SuspectedEpidemiologicalOriginValidation")
                        .HasColumnType("int");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TemperatureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TemperatureValidation")
                        .HasColumnType("int");

                    b.Property<string>("TransportCategoryComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransportCategoryValidation")
                        .HasColumnType("int");

                    b.Property<string>("TypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOfTransportMediumComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TypeOfTransportMediumValidation")
                        .HasColumnType("int");

                    b.Property<int?>("TypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UnitOfMeasureValidation")
                        .HasColumnType("int");

                    b.Property<string>("UsagePermissionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UsagePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UsagePermissionValidation")
                        .HasColumnType("int");

                    b.Property<string>("Variant")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VariantAssessment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VariantAssessmentComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VariantAssessmentValidation")
                        .HasColumnType("int");

                    b.Property<string>("VariantComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VariantValidation")
                        .HasColumnType("int");

                    b.Property<string>("ViralTiter")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ViralTiterComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ViralTiterValidation")
                        .HasColumnType("int");

                    b.Property<string>("VirusConcentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VirusConcentrationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VirusConcentrationValidation")
                        .HasColumnType("int");

                    b.Property<int?>("WarningEmailCurrentNumberOfVialsThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CultivabilityTypeId");

                    b.HasIndex("GeneticSequenceDataId");

                    b.HasIndex("InternationalTaxonomyClassificationId");

                    b.HasIndex("IsolationHostTypeId");

                    b.HasIndex("IsolationTechniqueTypeId");

                    b.HasIndex("LastOperationById");

                    b.HasIndex("OwnerBioHubFacilityId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProviderBioHubFacilityId");

                    b.HasIndex("ProviderLaboratoryId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasFilter("[ReferenceNumber] IS NOT NULL");

                    b.HasIndex("SuspectedEpidemiologicalOriginId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UsagePermissionId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialClinicalDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("IsolationHostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialShippingInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IsolationHostTypeId");

                    b.HasIndex("MaterialNumber")
                        .HasDatabaseName("IX_MaterialNumber");

                    b.HasIndex("MaterialShippingInformationId");

                    b.ToTable("MaterialClinicalDetails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialClinicalDetailHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("IsolationHostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialShippingInformationHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IsolationHostTypeId");

                    b.HasIndex("MaterialNumber")
                        .HasDatabaseName("IX_MaterialNumber");

                    b.HasIndex("MaterialShippingInformationHistoryId");

                    b.ToTable("MaterialClinicalDetailsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialCollectedSpecimenType", b =>
                {
                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecimenTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialId", "SpecimenTypeId");

                    b.HasIndex("SpecimenTypeId");

                    b.ToTable("MaterialCollectedSpecimenTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialCollectedSpecimenTypeHistory", b =>
                {
                    b.Property<Guid?>("MaterialHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecimenTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialHistoryId", "SpecimenTypeId");

                    b.HasIndex("SpecimenTypeId");

                    b.ToTable("MaterialCollectedSpecimenTypesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialGSDInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDFasta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GSDType")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PassageNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialGSDInfo");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialGSDInfoHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDFasta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GSDType")
                        .HasColumnType("int");

                    b.Property<Guid?>("MaterialHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PassageNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialHistoryId");

                    b.ToTable("MaterialGSDInfoHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddedAliquots")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("AgeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("AgeValidation")
                        .HasColumnType("int");

                    b.Property<int?>("BHFShareReadiness")
                        .HasColumnType("int");

                    b.Property<string>("BrandOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BrandOfTransportMediumComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("BrandOfTransportMediumValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectionDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CollectionDateValidation")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CultivabilityTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("CultivabilityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CultivabilityTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("CulturingCellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CulturingCellLineComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingCellLineValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingPassagesNumber")
                        .HasColumnType("int");

                    b.Property<string>("CulturingPassagesNumberComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingPassagesNumberValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingResult")
                        .HasColumnType("int");

                    b.Property<string>("CulturingResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CulturingResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturingResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CulturingResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CulturingResultValidation")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentNumberOfVials")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseAccessionId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DatabaseAccessionIdComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DatabaseAccessionIdValidation")
                        .HasColumnType("int");

                    b.Property<int?>("DatabaseUploadedBy")
                        .HasColumnType("int");

                    b.Property<string>("DatabaseUploadedByComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DatabaseUploadedByValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBMEPPReceipt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBMEPPReceiptComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DateOfBMEPPReceiptValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescriptionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DescriptionValidation")
                        .HasColumnType("int");

                    b.Property<string>("FacilityGSD")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FacilityGSDComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FacilityGSDValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FreezingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreezingDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FreezingDateValidation")
                        .HasColumnType("int");

                    b.Property<bool>("GMO")
                        .HasColumnType("bit");

                    b.Property<string>("GMOComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GMOValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDAnalysisResult")
                        .HasColumnType("int");

                    b.Property<string>("GSDAnalysisResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("GSDAnalysisResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDAnalysisResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDAnalysisResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDAnalysisResultValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GSDUploadingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GSDUploadingDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDUploadingDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("GSDUploadingStatus")
                        .HasColumnType("int");

                    b.Property<string>("GSDUploadingStatusComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GSDUploadingStatusValidation")
                        .HasColumnType("int");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GenderComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GenderValidation")
                        .HasColumnType("int");

                    b.Property<string>("GeneticSequenceDataComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("GeneticSequenceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("GeneticSequenceDataValidation")
                        .HasColumnType("int");

                    b.Property<string>("Genotype")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GenotypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("GenotypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("Infectivity")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("InfectivityComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("InfectivityValidation")
                        .HasColumnType("int");

                    b.Property<string>("InternationalTaxonomyClassificationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("InternationalTaxonomyClassificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InternationalTaxonomyClassificationValidation")
                        .HasColumnType("int");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPast")
                        .HasColumnType("bit");

                    b.Property<string>("IsolationHostTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("IsolationHostTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IsolationHostTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("IsolationTechniqueTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("IsolationTechniqueTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IsolationTechniqueTypeValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastAliquotsAdditionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastOperationById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lineage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LineageComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LineageValidation")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LocationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LocationValidation")
                        .HasColumnType("int");

                    b.Property<bool>("ManualCreation")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialCollectedSpecimenTypesComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaterialCollectedSpecimenTypesValidation")
                        .HasColumnType("int");

                    b.Property<string>("MaterialGSDInfoComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("MaterialGSDInfoValidation")
                        .HasColumnType("int");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NameComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("NameValidation")
                        .HasColumnType("int");

                    b.Property<string>("OriginalGeneticSequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalGeneticSequenceComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OriginalGeneticSequenceValidation")
                        .HasColumnType("int");

                    b.Property<string>("OriginalProductTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OriginalProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OriginalProductTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("OwnerBioHubFacilityComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OwnerBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OwnerBioHubFacilityValidation")
                        .HasColumnType("int");

                    b.Property<string>("Pathogen")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PathogenComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PathogenValidation")
                        .HasColumnType("int");

                    b.Property<string>("PatientStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PatientStatusComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PatientStatusValidation")
                        .HasColumnType("int");

                    b.Property<string>("ProductTypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProductTypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("ProductionCellLine")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductionCellLineComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductionCellLineValidation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProviderBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProviderLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PublicShare")
                        .HasColumnType("int");

                    b.Property<int?>("QualityControlResult")
                        .HasColumnType("int");

                    b.Property<string>("QualityControlResultComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("QualityControlResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QualityControlResultDateComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("QualityControlResultDateValidation")
                        .HasColumnType("int");

                    b.Property<int?>("QualityControlResultValidation")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReferenceNumberComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReferenceNumberValidation")
                        .HasColumnType("int");

                    b.Property<string>("SampleId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SampleIdComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SampleIdValidation")
                        .HasColumnType("int");

                    b.Property<string>("Serotype")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SerotypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SerotypeValidation")
                        .HasColumnType("int");

                    b.Property<double?>("ShipmentAmount")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentAmountComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentAmountValidation")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentMaterialCondition")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentMaterialConditionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ShipmentMaterialConditionNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ShipmentMaterialConditionValidation")
                        .HasColumnType("int");

                    b.Property<int?>("ShipmentNumberOfVials")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentNumberOfVialsComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentNumberOfVialsValidation")
                        .HasColumnType("int");

                    b.Property<double?>("ShipmentTemperature")
                        .HasColumnType("float");

                    b.Property<string>("ShipmentTemperatureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ShipmentTemperatureValidation")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentUnitOfMeasureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ShipmentUnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ShipmentUnitOfMeasureValidation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StrainDesignation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StrainDesignationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("StrainDesignationValidation")
                        .HasColumnType("int");

                    b.Property<string>("SuspectedEpidemiologicalOriginComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("SuspectedEpidemiologicalOriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SuspectedEpidemiologicalOriginValidation")
                        .HasColumnType("int");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TemperatureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TemperatureValidation")
                        .HasColumnType("int");

                    b.Property<string>("TransportCategoryComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TransportCategoryValidation")
                        .HasColumnType("int");

                    b.Property<string>("TypeComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TypeOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOfTransportMediumComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TypeOfTransportMediumValidation")
                        .HasColumnType("int");

                    b.Property<int?>("TypeValidation")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasureComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UnitOfMeasureValidation")
                        .HasColumnType("int");

                    b.Property<string>("UsagePermissionComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("UsagePermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("UsagePermissionValidation")
                        .HasColumnType("int");

                    b.Property<string>("Variant")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VariantAssessment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VariantAssessmentComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VariantAssessmentValidation")
                        .HasColumnType("int");

                    b.Property<string>("VariantComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VariantValidation")
                        .HasColumnType("int");

                    b.Property<string>("ViralTiter")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ViralTiterComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ViralTiterValidation")
                        .HasColumnType("int");

                    b.Property<string>("VirusConcentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VirusConcentrationComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("VirusConcentrationValidation")
                        .HasColumnType("int");

                    b.Property<int?>("WarningEmailCurrentNumberOfVialsThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CultivabilityTypeId");

                    b.HasIndex("GeneticSequenceDataId");

                    b.HasIndex("InternationalTaxonomyClassificationId");

                    b.HasIndex("IsolationHostTypeId");

                    b.HasIndex("IsolationTechniqueTypeId");

                    b.HasIndex("LastOperationById");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OwnerBioHubFacilityId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("ProviderBioHubFacilityId");

                    b.HasIndex("ProviderLaboratoryId");

                    b.HasIndex("SuspectedEpidemiologicalOriginId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitOfMeasureId");

                    b.HasIndex("UsagePermissionId");

                    b.ToTable("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessionNumberInGSDDatabase")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BrandOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturingCellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CulturingPassagesNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("DatabaseUsedForGSDUploadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FreezingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GSDUploadedToDatabase")
                        .HasColumnType("int");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialShippingInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TypeOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VirusConcentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseUsedForGSDUploadingId");

                    b.HasIndex("MaterialNumber")
                        .HasDatabaseName("IX_MaterialNumber");

                    b.HasIndex("MaterialShippingInformationId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("MaterialLaboratoryAnalysisInformation");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessionNumberInGSDDatabase")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BrandOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturingCellLine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CulturingPassagesNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("DatabaseUsedForGSDUploadingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FreezingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GSDUploadedToDatabase")
                        .HasColumnType("int");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialShippingInformationHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TypeOfTransportMedium")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VirusConcentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseUsedForGSDUploadingId");

                    b.HasIndex("MaterialNumber")
                        .HasDatabaseName("IX_MaterialNumber");

                    b.HasIndex("MaterialShippingInformationHistoryId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("MaterialLaboratoryAnalysisInformationHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("MaterialProducts");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialProductId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("WorklistToBioHubItemId");

                    b.ToTable("MaterialShippingInformations");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MaterialProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialProductId");

                    b.HasIndex("TransportCategoryId");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.HasIndex("WorklistToBioHubHistoryItemId");

                    b.ToTable("MaterialShippingInformationsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialUsagePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("MaterialUsagePermissions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.PriorityRequestType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("PriorityRequestTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AddToRegistration")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("OnBehalfOf")
                        .HasColumnType("bit");

                    b.Property<string>("PublicName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.RolePermission", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MaterialHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PriorityRequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QELaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusOfRequest")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TemperatureUnitOfMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransportModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BioHubFacilityId");

                    b.HasIndex("MaterialHistoryId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PriorityRequestTypeId");

                    b.HasIndex("QELaboratoryId");

                    b.HasIndex("TemperatureUnitOfMeasureId");

                    b.HasIndex("TransportModeId");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.HasIndex("WorklistFromBioHubItemId");

                    b.HasIndex("WorklistToBioHubHistoryItemId");

                    b.HasIndex("WorklistToBioHubItemId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApprovedSubmission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCourier")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedSubmission")
                        .HasDatabaseName("IX_ApprovedSubmission");

                    b.HasIndex("FromStatus")
                        .HasDatabaseName("IX_FromStatus");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToStatus")
                        .HasDatabaseName("IX_ToStatus");

                    b.ToTable("SMTA1WorkflowEmails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMTA1WorkflowItemId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BioHubFacilityId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("SMTA1WorkflowItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("SMTA1WorkflowHistoryItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItemDocument", b =>
                {
                    b.Property<Guid?>("SMTA1WorkflowHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.HasKey("SMTA1WorkflowHistoryItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("SMTA1WorkflowHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BioHubFacilityId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("SMTA1WorkflowItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowItemDocument", b =>
                {
                    b.Property<Guid?>("SMTA1WorkflowItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SMTA1WorkflowItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("SMTA1WorkflowItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApprovedSubmission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCourier")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedSubmission")
                        .HasDatabaseName("IX_ApprovedSubmission");

                    b.HasIndex("FromStatus")
                        .HasDatabaseName("IX_FromStatus");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToStatus")
                        .HasDatabaseName("IX_ToStatus");

                    b.ToTable("SMTA2WorkflowEmails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMTA2WorkflowItemId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("SMTA2WorkflowItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("SMTA2WorkflowHistoryItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItemDocument", b =>
                {
                    b.Property<Guid?>("SMTA2WorkflowHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.HasKey("SMTA2WorkflowHistoryItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("SMTA2WorkflowHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("SMTA2WorkflowItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowItemDocument", b =>
                {
                    b.Property<Guid?>("SMTA2WorkflowItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SMTA2WorkflowItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("SMTA2WorkflowItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SpecimenType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("SpecimenTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("TemperatureUnitOfMeasures");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TransportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("TransportCategories");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TransportMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Name");

                    b.ToTable("TransportModes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("OperationalFocalPoint")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BioHubFacilityId");

                    b.HasIndex("CourierId");

                    b.HasIndex("DeletedOn")
                        .HasDatabaseName("IX_DeletedOn");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Email");

                    b.HasIndex("ExternalId")
                        .HasDatabaseName("IX_ExternalId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.UserHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("CourierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LastOperationByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOperationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("OperationalFocalPoint")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BioHubFacilityId");

                    b.HasIndex("CourierId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LastOperationDate")
                        .HasDatabaseName("IX_LastOperationDate");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserId");

                    b.ToTable("UsersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.UserRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CountryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstituteName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool?>("TermsAndConditionAccepted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRequests");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.UserRequestStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsResponseMessage")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRequestStatuses");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApprovedSubmission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCourier")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNumberOfVialsWarning")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedSubmission")
                        .HasDatabaseName("IX_ApprovedSubmission");

                    b.HasIndex("FromStatus")
                        .HasDatabaseName("IX_FromStatus");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToStatus")
                        .HasDatabaseName("IX_ToStatus");

                    b.ToTable("WorklistFromBioHubEmails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Annex2ApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Annex2ApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Annex2Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Annex2FillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Annex2OfSMTA2ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Annex2OfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Annex2TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("BiosafetyChecklistApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("BiosafetyChecklistApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("BiosafetyChecklistApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BiosafetyChecklistFillingOption")
                        .HasColumnType("int");

                    b.Property<string>("BiosafetyChecklistOfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BookingFormApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("BookingFormApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BookingFormFillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookingFormOfSMTA2ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingFormOfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalAnnex2OfSMTA2DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBiosafetyChecklistDocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBookingFormOfSMTA2DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RequestInitiationFromBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInitiationToLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SavedBiosafetyChecklistThreadComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WHODocumentRegistrationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WaitForArrivalConditionCheckApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("WaitForArrivalConditionCheckApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorklistItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("RequestInitiationFromBioHubFacilityId");

                    b.HasIndex("RequestInitiationToLaboratoryId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.HasIndex("WorklistFromBioHubItemId");

                    b.ToTable("WorklistFromBioHubHistoryItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemAnnex2OfSMTA2Condition", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Annex2OfSMTA2ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Flag")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorklistFromBioHubHistoryItemId", "Annex2OfSMTA2ConditionId");

                    b.HasIndex("Annex2OfSMTA2ConditionId");

                    b.ToTable("WorklistFromBioHubHistoryItemAnnex2OfSMTA2Conditions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BiosafetyChecklistOfSMTA2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Flag")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorklistFromBioHubHistoryItemId", "BiosafetyChecklistOfSMTA2Id");

                    b.HasIndex("BiosafetyChecklistOfSMTA2Id");

                    b.ToTable("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2s");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemBiosafetyChecklistThreadComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.ToTable("WorklistFromBioHubHistoryItemBiosafetyChecklistThreadComments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemDocument", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.HasKey("WorklistFromBioHubHistoryItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorklistFromBioHubHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.ToTable("WorklistFromBioHubHistoryItemFeedback");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemLaboratoryFocalPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorklistFromBioHubHistoryItemId");

                    b.ToTable("WorklistFromBioHubHistoryItemLaboratoryFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemMaterial", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WorklistFromBioHubHistoryItemId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorklistFromBioHubHistoryItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Annex2ApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Annex2ApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Annex2Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Annex2FillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Annex2OfSMTA2ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Annex2OfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Annex2TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("BiosafetyChecklistApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("BiosafetyChecklistApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("BiosafetyChecklistApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BiosafetyChecklistFillingOption")
                        .HasColumnType("int");

                    b.Property<string>("BiosafetyChecklistOfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BookingFormApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("BookingFormApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BookingFormFillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookingFormOfSMTA2ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingFormOfSMTA2SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalAnnex2OfSMTA2DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBiosafetyChecklistDocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBookingFormOfSMTA2DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RequestInitiationFromBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInitiationToLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SavedBiosafetyChecklistThreadComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WHODocumentRegistrationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WaitForArrivalConditionCheckApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("WaitForArrivalConditionCheckApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("WorklistItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasFilter("[ReferenceNumber] IS NOT NULL");

                    b.HasIndex("RequestInitiationFromBioHubFacilityId");

                    b.HasIndex("RequestInitiationToLaboratoryId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("WorklistFromBioHubItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemAnnex2OfSMTA2Condition", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Annex2OfSMTA2ConditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Flag")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorklistFromBioHubItemId", "Annex2OfSMTA2ConditionId");

                    b.HasIndex("Annex2OfSMTA2ConditionId");

                    b.ToTable("WorklistFromBioHubItemAnnex2OfSMTA2Conditions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemBiosafetyChecklistOfSMTA2", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BiosafetyChecklistOfSMTA2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Flag")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorklistFromBioHubItemId", "BiosafetyChecklistOfSMTA2Id");

                    b.HasIndex("BiosafetyChecklistOfSMTA2Id");

                    b.ToTable("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2s");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemBiosafetyChecklistThreadComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistFromBioHubItemId");

                    b.ToTable("WorklistFromBioHubItemBiosafetyChecklistThreadComments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemDocument", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("WorklistFromBioHubItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorklistFromBioHubItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistFromBioHubItemId");

                    b.ToTable("WorklistFromBioHubItemFeedback");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemLaboratoryFocalPoint", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WorklistFromBioHubItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WorklistFromBioHubItemLaboratoryFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemMaterial", b =>
                {
                    b.Property<Guid?>("WorklistFromBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WorklistFromBioHubItemId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorklistFromBioHubItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistItemUsedReferenceNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_ReferenceNumber");

                    b.ToTable("WorklistItemUsedReferenceNumbers");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApprovedSubmission")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsCourier")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ToStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedSubmission")
                        .HasDatabaseName("IX_ApprovedSubmission");

                    b.HasIndex("FromStatus")
                        .HasDatabaseName("IX_FromStatus");

                    b.HasIndex("RoleId");

                    b.HasIndex("ToStatus")
                        .HasDatabaseName("IX_ToStatus");

                    b.ToTable("WorklistToBioHubEmails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Annex2ApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Annex2ApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Annex2Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Annex2FillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Annex2OfSMTA1ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Annex2OfSMTA1SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Annex2TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("BookingFormApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("BookingFormApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BookingFormFillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookingFormOfSMTA1ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingFormOfSMTA1SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalAnnex2OfSMTA1DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBookingFormOfSMTA1DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RequestInitiationFromLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInitiationToBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WHODocumentRegistrationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WaitForArrivalConditionCheckApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("WaitForArrivalConditionCheckApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("WorklistItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("RequestInitiationFromLaboratoryId");

                    b.HasIndex("RequestInitiationToBioHubFacilityId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.HasIndex("WorklistToBioHubItemId");

                    b.ToTable("WorklistToBioHubHistoryItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemBioHubFacilityFocalPoint", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WorklistToBioHubHistoryItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WorklistToBioHubHistoryItemBioHubFacilityFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemDocument", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.HasKey("WorklistToBioHubHistoryItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorklistToBioHubHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistToBioHubHistoryItemId");

                    b.ToTable("WorklistToBioHubHistoryItemFeedback");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemLaboratoryFocalPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorklistToBioHubHistoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorklistToBioHubHistoryItemId");

                    b.ToTable("WorklistToBioHubHistoryItemLaboratoryFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Annex2ApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Annex2ApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Annex2Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Annex2FillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Annex2OfSMTA1ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Annex2OfSMTA1SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Annex2TermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<string>("BookingFormApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("BookingFormApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<int?>("BookingFormFillingOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BookingFormOfSMTA1ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingFormOfSMTA1SignatureText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastOperationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("LastSubmissionApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OriginalAnnex2OfSMTA1DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OriginalBookingFormOfSMTA1DocumentTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PreviousStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("RequestInitiationFromLaboratoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInitiationToBioHubFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WHODocumentRegistrationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WaitForArrivalConditionCheckApprovalComment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("WaitForArrivalConditionCheckApprovalFlag")
                        .HasColumnType("bit");

                    b.Property<string>("WorklistItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LastOperationUserId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasFilter("[ReferenceNumber] IS NOT NULL");

                    b.HasIndex("RequestInitiationFromLaboratoryId");

                    b.HasIndex("RequestInitiationToBioHubFacilityId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Status");

                    b.ToTable("WorklistToBioHubItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemBioHubFacilityFocalPoint", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WorklistToBioHubItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WorklistToBioHubItemBioHubFacilityFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemDocument", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDocumentFile")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("WorklistToBioHubItemId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorklistToBioHubItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.HasIndex("WorklistToBioHubItemId");

                    b.ToTable("WorklistToBioHubItemFeedback");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemLaboratoryFocalPoint", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Other")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("WorklistToBioHubItemId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WorklistToBioHubItemLaboratoryFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemMaterial", b =>
                {
                    b.Property<Guid?>("WorklistToBioHubItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorklistToBioHubItemId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("WorklistToBioHubItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BioHubFacility", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BSLLevel", "BSLLevel")
                        .WithMany("BioHubFacilities")
                        .HasForeignKey("BSLLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("BioHubFacilities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BSLLevel");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BioHubFacilityHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BSLLevel", "BSLLevel")
                        .WithMany("BioHubFacilitiesHistory")
                        .HasForeignKey("BSLLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "BioHubFacility")
                        .WithMany("BioHubFacilitiesHistory")
                        .HasForeignKey("BioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("BioHubFacilitiesHistory")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BSLLevel");

                    b.Navigation("BioHubFacility");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingForm", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Courier", "Courier")
                        .WithMany("BookingForms")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "MaterialProduct")
                        .WithMany("BookingForms")
                        .HasForeignKey("MaterialProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("BookingForms")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportMode", "TransportMode")
                        .WithMany("BookingForms")
                        .HasForeignKey("TransportModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("BookingForms")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("BookingForms")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Courier");

                    b.Navigation("MaterialProduct");

                    b.Navigation("TransportCategory");

                    b.Navigation("TransportMode");

                    b.Navigation("WorklistFromBioHubItem");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormCourierUser", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BookingForm", "BookingForm")
                        .WithMany("BookingFormCourierUsers")
                        .HasForeignKey("BookingFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("BookingFormCourierUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormCourierUserHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BookingFormHistory", "BookingFormHistory")
                        .WithMany("BookingFormCourierUsersHistory")
                        .HasForeignKey("BookingFormHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("BookingFormCourierUsersHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingFormHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Courier", "Courier")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "MaterialProduct")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("MaterialProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportMode", "TransportMode")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("TransportModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("BookingFormsHistory")
                        .HasForeignKey("WorklistToBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Courier");

                    b.Navigation("MaterialProduct");

                    b.Navigation("TransportCategory");

                    b.Navigation("TransportMode");

                    b.Navigation("WorklistFromBioHubHistoryItem");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormPickupUser", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BookingForm", "BookingForm")
                        .WithMany("BookingFormPickupUsers")
                        .HasForeignKey("BookingFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("BookingFormPickupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingForm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormPickupUserHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BookingFormHistory", "BookingFormHistory")
                        .WithMany("BookingFormPickupUsersHistory")
                        .HasForeignKey("BookingFormHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("BookingFormPickupUsersHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingFormHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CollectedSpecimenType", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformation", "MaterialLaboratoryAnalysisInformation")
                        .WithMany("CollectedSpecimenTypes")
                        .HasForeignKey("MaterialLaboratoryAnalysisInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SpecimenType", "SpecimenType")
                        .WithMany("CollectedSpecimenTypes")
                        .HasForeignKey("SpecimenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialLaboratoryAnalysisInformation");

                    b.Navigation("SpecimenType");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CollectedSpecimenTypeHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformationHistory", "MaterialLaboratoryAnalysisInformationHistory")
                        .WithMany("CollectedSpecimenTypes")
                        .HasForeignKey("MaterialLaboratoryAnalysisInformationHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SpecimenType", "SpecimenType")
                        .WithMany("CollectedSpecimenTypesHistory")
                        .HasForeignKey("SpecimenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialLaboratoryAnalysisInformationHistory");

                    b.Navigation("SpecimenType");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Courier", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("Couriers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CourierHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("CouriersHistory")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Courier", "Courier")
                        .WithMany("CourierHistory")
                        .HasForeignKey("CourierId");

                    b.Navigation("Country");

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Document", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "BioHubFacility")
                        .WithMany("Documents")
                        .HasForeignKey("BioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("Documents")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.DocumentTemplate", "OriginalDocumentTemplate")
                        .WithMany("Documents")
                        .HasForeignKey("OriginalDocumentTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");

                    b.Navigation("BioHubFacility");

                    b.Navigation("Laboratory");

                    b.Navigation("OriginalDocumentTemplate");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.DocumentTemplate", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "UploadedBy")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Laboratory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BSLLevel", "BSLLevel")
                        .WithMany("Laboratories")
                        .HasForeignKey("BSLLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("Laboratories")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BSLLevel");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.LaboratoryHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BSLLevel", "BSLLevel")
                        .WithMany("LaboratoriesHistory")
                        .HasForeignKey("BSLLevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("LaboratoriesHistory")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("LaboratoriesHistory")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BSLLevel");

                    b.Navigation("Country");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Material", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.CultivabilityType", "CultivabilityType")
                        .WithMany("Materials")
                        .HasForeignKey("CultivabilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.GeneticSequenceData", "GeneticSequenceData")
                        .WithMany("Materials")
                        .HasForeignKey("GeneticSequenceDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.InternationalTaxonomyClassification", "InternationalTaxonomyClassification")
                        .WithMany("Materials")
                        .HasForeignKey("InternationalTaxonomyClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.IsolationHostType", "IsolationHostType")
                        .WithMany("Materials")
                        .HasForeignKey("IsolationHostTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.IsolationTechniqueType", "IsolationTechniqueType")
                        .WithMany("Materials")
                        .HasForeignKey("IsolationTechniqueTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationBy")
                        .WithMany("Materials")
                        .HasForeignKey("LastOperationById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "OwnerBioHubFacility")
                        .WithMany("OwnedMaterials")
                        .HasForeignKey("OwnerBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "ProductType")
                        .WithMany("Materials")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "ProviderBioHubFacility")
                        .WithMany("Materials")
                        .HasForeignKey("ProviderBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "ProviderLaboratory")
                        .WithMany("Materials")
                        .HasForeignKey("ProviderLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "SuspectedEpidemiologicalOrigin")
                        .WithMany("Materials")
                        .HasForeignKey("SuspectedEpidemiologicalOriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("Materials")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialType", "Type")
                        .WithMany("Materials")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Materials")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialUsagePermission", "UsagePermission")
                        .WithMany("Materials")
                        .HasForeignKey("UsagePermissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CultivabilityType");

                    b.Navigation("GeneticSequenceData");

                    b.Navigation("InternationalTaxonomyClassification");

                    b.Navigation("IsolationHostType");

                    b.Navigation("IsolationTechniqueType");

                    b.Navigation("LastOperationBy");

                    b.Navigation("OwnerBioHubFacility");

                    b.Navigation("ProductType");

                    b.Navigation("ProviderBioHubFacility");

                    b.Navigation("ProviderLaboratory");

                    b.Navigation("SuspectedEpidemiologicalOrigin");

                    b.Navigation("TransportCategory");

                    b.Navigation("Type");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UsagePermission");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialClinicalDetail", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.IsolationHostType", "IsolationHostType")
                        .WithMany("MaterialClinicalDetails")
                        .HasForeignKey("IsolationHostTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialShippingInformation", "MaterialShippingInformation")
                        .WithMany("MaterialClinicalDetails")
                        .HasForeignKey("MaterialShippingInformationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IsolationHostType");

                    b.Navigation("MaterialShippingInformation");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialClinicalDetailHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.IsolationHostType", "IsolationHostType")
                        .WithMany("MaterialClinicalDetailsHistory")
                        .HasForeignKey("IsolationHostTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialShippingInformationHistory", "MaterialShippingInformationHistory")
                        .WithMany("MaterialClinicalDetailsHistory")
                        .HasForeignKey("MaterialShippingInformationHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IsolationHostType");

                    b.Navigation("MaterialShippingInformationHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialCollectedSpecimenType", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("MaterialCollectedSpecimenTypes")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SpecimenType", "SpecimenType")
                        .WithMany("MaterialCollectedSpecimenTypes")
                        .HasForeignKey("SpecimenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("SpecimenType");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialCollectedSpecimenTypeHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialHistory", "MaterialHistory")
                        .WithMany("MaterialCollectedSpecimenTypesHistory")
                        .HasForeignKey("MaterialHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SpecimenType", "SpecimenType")
                        .WithMany("MaterialCollectedSpecimenTypesHistory")
                        .HasForeignKey("SpecimenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialHistory");

                    b.Navigation("SpecimenType");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialGSDInfo", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("MaterialGSDInfo")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Material");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialGSDInfoHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialHistory", "MaterialHistory")
                        .WithMany("MaterialGSDInfo")
                        .HasForeignKey("MaterialHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaterialHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.CultivabilityType", "CultivabilityType")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("CultivabilityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.GeneticSequenceData", "GeneticSequenceData")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("GeneticSequenceDataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.InternationalTaxonomyClassification", "InternationalTaxonomyClassification")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("InternationalTaxonomyClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.IsolationHostType", "IsolationHostType")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("IsolationHostTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.IsolationTechniqueType", "IsolationTechniqueType")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("IsolationTechniqueTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationBy")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("LastOperationById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "OwnerBioHubFacility")
                        .WithMany()
                        .HasForeignKey("OwnerBioHubFacilityId");

                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "ProductType")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "ProviderBioHubFacility")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("ProviderBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "ProviderLaboratory")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("ProviderLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Country", "SuspectedEpidemiologicalOrigin")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("SuspectedEpidemiologicalOriginId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialType", "Type")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", "UnitOfMeasure")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialUsagePermission", "UsagePermission")
                        .WithMany("MaterialsHistory")
                        .HasForeignKey("UsagePermissionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CultivabilityType");

                    b.Navigation("GeneticSequenceData");

                    b.Navigation("InternationalTaxonomyClassification");

                    b.Navigation("IsolationHostType");

                    b.Navigation("IsolationTechniqueType");

                    b.Navigation("LastOperationBy");

                    b.Navigation("Material");

                    b.Navigation("OwnerBioHubFacility");

                    b.Navigation("ProductType");

                    b.Navigation("ProviderBioHubFacility");

                    b.Navigation("ProviderLaboratory");

                    b.Navigation("SuspectedEpidemiologicalOrigin");

                    b.Navigation("TransportCategory");

                    b.Navigation("Type");

                    b.Navigation("UnitOfMeasure");

                    b.Navigation("UsagePermission");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformation", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.GeneticSequenceData", "DatabaseUsedForGSDUploading")
                        .WithMany("MaterialLaboratoryAnalysisInformation")
                        .HasForeignKey("DatabaseUsedForGSDUploadingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialShippingInformation", "MaterialShippingInformation")
                        .WithMany("MaterialLaboratoryAnalysisInformation")
                        .HasForeignKey("MaterialShippingInformationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", "UnitOfMeasure")
                        .WithMany("MaterialLaboratoryAnalysisInformation")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DatabaseUsedForGSDUploading");

                    b.Navigation("MaterialShippingInformation");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformationHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.GeneticSequenceData", "DatabaseUsedForGSDUploading")
                        .WithMany("MaterialLaboratoryAnalysisInformationHistory")
                        .HasForeignKey("DatabaseUsedForGSDUploadingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialShippingInformationHistory", "MaterialShippingInformationHistory")
                        .WithMany("MaterialLaboratoryAnalysisInformationHistory")
                        .HasForeignKey("MaterialShippingInformationHistoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", "UnitOfMeasure")
                        .WithMany("MaterialLaboratoryAnalysisInformationHistory")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DatabaseUsedForGSDUploading");

                    b.Navigation("MaterialShippingInformationHistory");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformation", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "MaterialProduct")
                        .WithMany("MaterialShippingInformations")
                        .HasForeignKey("MaterialProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("MaterialShippingInformations")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("MaterialShippingInformations")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaterialProduct");

                    b.Navigation("TransportCategory");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformationHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.MaterialProduct", "MaterialProduct")
                        .WithMany("MaterialShippingInformationsHistory")
                        .HasForeignKey("MaterialProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TransportCategory", "TransportCategory")
                        .WithMany("MaterialShippingInformationsHistory")
                        .HasForeignKey("TransportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", null)
                        .WithMany("MaterialShippingInformationsHistory")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("MaterialShippingInformationsHistory")
                        .HasForeignKey("WorklistToBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaterialProduct");

                    b.Navigation("TransportCategory");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Resource", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "UploadedBy")
                        .WithMany("Resources")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.RolePermission", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Shipment", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "BioHubFacility")
                        .WithMany("Shipments")
                        .HasForeignKey("BioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.MaterialHistory", null)
                        .WithMany("Shipments")
                        .HasForeignKey("MaterialHistoryId");

                    b.HasOne("WHO.BioHub.Models.Models.Material", null)
                        .WithMany("Shipments")
                        .HasForeignKey("MaterialId");

                    b.HasOne("WHO.BioHub.Models.Models.PriorityRequestType", null)
                        .WithMany("Shipments")
                        .HasForeignKey("PriorityRequestTypeId");

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "QELaboratory")
                        .WithMany("Shipments")
                        .HasForeignKey("QELaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", null)
                        .WithMany("Shipments")
                        .HasForeignKey("TemperatureUnitOfMeasureId");

                    b.HasOne("WHO.BioHub.Models.Models.TransportMode", null)
                        .WithMany("Shipments")
                        .HasForeignKey("TransportModeId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", null)
                        .WithMany("Shipments")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("Shipments")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", null)
                        .WithMany("Shipments")
                        .HasForeignKey("WorklistToBioHubHistoryItemId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("Shipments")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BioHubFacility");

                    b.Navigation("QELaboratory");

                    b.Navigation("WorklistFromBioHubItem");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowEmail", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("SMTA1WorkflowEmails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", null)
                        .WithMany("SMTA1WorkflowHistoryItems")
                        .HasForeignKey("BioHubFacilityId");

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("SMTA1WorkflowHistoryItems")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("SMTA1WorkflowHistoryItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.SMTA1WorkflowItem", "SMTA1WorkflowItem")
                        .WithMany("SMTA1WorkflowHistoryItems")
                        .HasForeignKey("SMTA1WorkflowItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("LastOperationUser");

                    b.Navigation("SMTA1WorkflowItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("SMTA1WorkflowHistoryItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItem", "SMTA1WorkflowHistoryItem")
                        .WithMany("SMTA1WorkflowHistoryItemDocuments")
                        .HasForeignKey("SMTA1WorkflowHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SMTA1WorkflowHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", null)
                        .WithMany("SMTA1WorkflowItems")
                        .HasForeignKey("BioHubFacilityId");

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("SMTA1WorkflowItems")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("SMTA1WorkflowItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Laboratory");

                    b.Navigation("LastOperationUser");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("SMTA1WorkflowItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SMTA1WorkflowItem", "SMTA1WorkflowItem")
                        .WithMany("SMTA1WorkflowItemDocuments")
                        .HasForeignKey("SMTA1WorkflowItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SMTA1WorkflowItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowEmail", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("SMTA2WorkflowEmails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("SMTA2WorkflowHistoryItems")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("SMTA2WorkflowHistoryItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.SMTA2WorkflowItem", "SMTA2WorkflowItem")
                        .WithMany("SMTA2WorkflowHistoryItems")
                        .HasForeignKey("SMTA2WorkflowItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Laboratory");

                    b.Navigation("LastOperationUser");

                    b.Navigation("SMTA2WorkflowItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("SMTA2WorkflowHistoryItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItem", "SMTA2WorkflowHistoryItem")
                        .WithMany("SMTA2WorkflowHistoryItemDocuments")
                        .HasForeignKey("SMTA2WorkflowHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SMTA2WorkflowHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("SMTA2WorkflowItems")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("SMTA2WorkflowItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Laboratory");

                    b.Navigation("LastOperationUser");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("SMTA2WorkflowItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.SMTA2WorkflowItem", "SMTA2WorkflowItem")
                        .WithMany("SMTA2WorkflowItemDocuments")
                        .HasForeignKey("SMTA2WorkflowItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("SMTA2WorkflowItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.User", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "BioHubFacility")
                        .WithMany("Users")
                        .HasForeignKey("BioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Courier", "Courier")
                        .WithMany("Users")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("Users")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BioHubFacility");

                    b.Navigation("Courier");

                    b.Navigation("Laboratory");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.UserHistory", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "BioHubFacility")
                        .WithMany("UsersHistory")
                        .HasForeignKey("BioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Courier", "Courier")
                        .WithMany("UsersHistory")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("UsersHistory")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("UsersHistory")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("UsersHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("BioHubFacility");

                    b.Navigation("Courier");

                    b.Navigation("Laboratory");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.UserRequest", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Country", "Country")
                        .WithMany("UserRequests")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "Laboratory")
                        .WithMany("UserRequests")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("UserRequests")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Laboratory");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubEmail", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("WorklistFromBioHubEmails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("WorklistFromBioHubHistoryItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "RequestInitiationFromBioHubFacility")
                        .WithMany("WorklistFromBioHubHistoryItems")
                        .HasForeignKey("RequestInitiationFromBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "RequestInitiationToLaboratory")
                        .WithMany("WorklistFromBioHubHistoryItems")
                        .HasForeignKey("RequestInitiationToLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubHistoryItems")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastOperationUser");

                    b.Navigation("RequestInitiationFromBioHubFacility");

                    b.Navigation("RequestInitiationToLaboratory");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemAnnex2OfSMTA2Condition", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Annex2OfSMTA2Condition", "Annex2OfSMTA2Condition")
                        .WithMany("WorklistFromBioHubHistoryItemAnnex2OfSMTA2Conditions")
                        .HasForeignKey("Annex2OfSMTA2ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemAnnex2OfSMTA2Conditions")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Annex2OfSMTA2Condition");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BiosafetyChecklistOfSMTA2", "BiosafetyChecklistOfSMTA2")
                        .WithMany("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2s")
                        .HasForeignKey("BiosafetyChecklistOfSMTA2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2s")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BiosafetyChecklistOfSMTA2");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemBiosafetyChecklistThreadComment", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2Comments")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2Comments")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("WorklistFromBioHubHistoryItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemDocuments")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemFeedback", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistFromBioHubHistoryItemFeedbacks")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemFeedbacks")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemLaboratoryFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistFromBioHubHistoryItemLaboratoryFocalPoints")
                        .HasForeignKey("UserId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemLaboratoryFocalPoints")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId");

                    b.Navigation("User");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItemMaterial", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("WorklistFromBioHubHistoryItemMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", "WorklistFromBioHubHistoryItem")
                        .WithMany("WorklistFromBioHubHistoryItemMaterials")
                        .HasForeignKey("WorklistFromBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("WorklistFromBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("WorklistFromBioHubItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "RequestInitiationFromBioHubFacility")
                        .WithMany("WorklistFromBioHubItems")
                        .HasForeignKey("RequestInitiationFromBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "RequestInitiationToLaboratory")
                        .WithMany("WorklistFromBioHubItems")
                        .HasForeignKey("RequestInitiationToLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastOperationUser");

                    b.Navigation("RequestInitiationFromBioHubFacility");

                    b.Navigation("RequestInitiationToLaboratory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemAnnex2OfSMTA2Condition", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Annex2OfSMTA2Condition", "Annex2OfSMTA2Condition")
                        .WithMany("WorklistFromBioHubItemAnnex2OfSMTA2Conditions")
                        .HasForeignKey("Annex2OfSMTA2ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemAnnex2OfSMTA2Conditions")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Annex2OfSMTA2Condition");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemBiosafetyChecklistOfSMTA2", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.BiosafetyChecklistOfSMTA2", "BiosafetyChecklistOfSMTA2")
                        .WithMany("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2s")
                        .HasForeignKey("BiosafetyChecklistOfSMTA2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2s")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BiosafetyChecklistOfSMTA2");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemBiosafetyChecklistThreadComment", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2Comments")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2Comments")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("WorklistFromBioHubItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemDocuments")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemFeedback", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistFromBioHubItemFeedbacks")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemFeedbacks")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemLaboratoryFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistFromBioHubItemLaboratoryFocalPoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemLaboratoryFocalPoints")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItemMaterial", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("WorklistFromBioHubItemMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistFromBioHubItem", "WorklistFromBioHubItem")
                        .WithMany("WorklistFromBioHubItemMaterials")
                        .HasForeignKey("WorklistFromBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("WorklistFromBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubEmail", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Role", "Role")
                        .WithMany("WorklistToBioHubEmails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("WorklistToBioHubHistoryItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "RequestInitiationFromLaboratory")
                        .WithMany("WorklistToBioHubHistoryItems")
                        .HasForeignKey("RequestInitiationFromLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "RequestInitiationToBioHubFacility")
                        .WithMany("WorklistToBioHubHistoryItems")
                        .HasForeignKey("RequestInitiationToBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubHistoryItems")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastOperationUser");

                    b.Navigation("RequestInitiationFromLaboratory");

                    b.Navigation("RequestInitiationToBioHubFacility");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemBioHubFacilityFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistToBioHubHistoryItemBioHubFacilityFocalPoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("WorklistToBioHubHistoryItemBioHubFacilityFocalPoints")
                        .HasForeignKey("WorklistToBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("WorklistToBioHubHistoryItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("WorklistToBioHubHistoryItemDocuments")
                        .HasForeignKey("WorklistToBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemFeedback", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistToBioHubHistoryItemFeedbacks")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("WorklistToBioHubHistoryItemFeedbacks")
                        .HasForeignKey("WorklistToBioHubHistoryItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItemLaboratoryFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistToBioHubHistoryItemLaboratoryFocalPoints")
                        .HasForeignKey("UserId");

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", "WorklistToBioHubHistoryItem")
                        .WithMany("WorklistToBioHubHistoryItemLaboratoryFocalPoints")
                        .HasForeignKey("WorklistToBioHubHistoryItemId");

                    b.Navigation("User");

                    b.Navigation("WorklistToBioHubHistoryItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItem", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "LastOperationUser")
                        .WithMany("WorklistToBioHubItems")
                        .HasForeignKey("LastOperationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.Laboratory", "RequestInitiationFromLaboratory")
                        .WithMany("WorklistToBioHubItems")
                        .HasForeignKey("RequestInitiationFromLaboratoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.BioHubFacility", "RequestInitiationToBioHubFacility")
                        .WithMany("WorklistToBioHubItems")
                        .HasForeignKey("RequestInitiationToBioHubFacilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastOperationUser");

                    b.Navigation("RequestInitiationFromLaboratory");

                    b.Navigation("RequestInitiationToBioHubFacility");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemBioHubFacilityFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistToBioHubItemBioHubFacilityFocalPoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubItemBioHubFacilityFocalPoints")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemDocument", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Document", "Document")
                        .WithMany("WorklistToBioHubItemDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubItemDocuments")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemFeedback", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "PostedBy")
                        .WithMany("WorklistToBioHubItemFeedbacks")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubItemFeedbacks")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PostedBy");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemLaboratoryFocalPoint", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.User", "User")
                        .WithMany("WorklistToBioHubItemLaboratoryFocalPoints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubItemLaboratoryFocalPoints")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItemMaterial", b =>
                {
                    b.HasOne("WHO.BioHub.Models.Models.Material", "Material")
                        .WithMany("WorklistToBioHubItemMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WHO.BioHub.Models.Models.WorklistToBioHubItem", "WorklistToBioHubItem")
                        .WithMany("WorklistToBioHubItemMaterials")
                        .HasForeignKey("WorklistToBioHubItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("WorklistToBioHubItem");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Annex2OfSMTA2Condition", b =>
                {
                    b.Navigation("WorklistFromBioHubHistoryItemAnnex2OfSMTA2Conditions");

                    b.Navigation("WorklistFromBioHubItemAnnex2OfSMTA2Conditions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BioHubFacility", b =>
                {
                    b.Navigation("BioHubFacilitiesHistory");

                    b.Navigation("Documents");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("OwnedMaterials");

                    b.Navigation("SMTA1WorkflowHistoryItems");

                    b.Navigation("SMTA1WorkflowItems");

                    b.Navigation("Shipments");

                    b.Navigation("Users");

                    b.Navigation("UsersHistory");

                    b.Navigation("WorklistFromBioHubHistoryItems");

                    b.Navigation("WorklistFromBioHubItems");

                    b.Navigation("WorklistToBioHubHistoryItems");

                    b.Navigation("WorklistToBioHubItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BiosafetyChecklistOfSMTA2", b =>
                {
                    b.Navigation("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2s");

                    b.Navigation("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2s");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingForm", b =>
                {
                    b.Navigation("BookingFormCourierUsers");

                    b.Navigation("BookingFormPickupUsers");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BookingFormHistory", b =>
                {
                    b.Navigation("BookingFormCourierUsersHistory");

                    b.Navigation("BookingFormPickupUsersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.BSLLevel", b =>
                {
                    b.Navigation("BioHubFacilities");

                    b.Navigation("BioHubFacilitiesHistory");

                    b.Navigation("Laboratories");

                    b.Navigation("LaboratoriesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Country", b =>
                {
                    b.Navigation("BioHubFacilities");

                    b.Navigation("BioHubFacilitiesHistory");

                    b.Navigation("Couriers");

                    b.Navigation("CouriersHistory");

                    b.Navigation("Laboratories");

                    b.Navigation("LaboratoriesHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("UserRequests");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Courier", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("BookingFormsHistory");

                    b.Navigation("CourierHistory");

                    b.Navigation("Users");

                    b.Navigation("UsersHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.CultivabilityType", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Document", b =>
                {
                    b.Navigation("SMTA1WorkflowHistoryItemDocuments");

                    b.Navigation("SMTA1WorkflowItemDocuments");

                    b.Navigation("SMTA2WorkflowHistoryItemDocuments");

                    b.Navigation("SMTA2WorkflowItemDocuments");

                    b.Navigation("WorklistFromBioHubHistoryItemDocuments");

                    b.Navigation("WorklistFromBioHubItemDocuments");

                    b.Navigation("WorklistToBioHubHistoryItemDocuments");

                    b.Navigation("WorklistToBioHubItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.DocumentTemplate", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.GeneticSequenceData", b =>
                {
                    b.Navigation("MaterialLaboratoryAnalysisInformation");

                    b.Navigation("MaterialLaboratoryAnalysisInformationHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.InternationalTaxonomyClassification", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.IsolationHostType", b =>
                {
                    b.Navigation("MaterialClinicalDetails");

                    b.Navigation("MaterialClinicalDetailsHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.IsolationTechniqueType", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Laboratory", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("LaboratoriesHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("SMTA1WorkflowHistoryItems");

                    b.Navigation("SMTA1WorkflowItems");

                    b.Navigation("SMTA2WorkflowHistoryItems");

                    b.Navigation("SMTA2WorkflowItems");

                    b.Navigation("Shipments");

                    b.Navigation("UserRequests");

                    b.Navigation("Users");

                    b.Navigation("UsersHistory");

                    b.Navigation("WorklistFromBioHubHistoryItems");

                    b.Navigation("WorklistFromBioHubItems");

                    b.Navigation("WorklistToBioHubHistoryItems");

                    b.Navigation("WorklistToBioHubItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Material", b =>
                {
                    b.Navigation("MaterialCollectedSpecimenTypes");

                    b.Navigation("MaterialGSDInfo");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("Shipments");

                    b.Navigation("WorklistFromBioHubHistoryItemMaterials");

                    b.Navigation("WorklistFromBioHubItemMaterials");

                    b.Navigation("WorklistToBioHubItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialHistory", b =>
                {
                    b.Navigation("MaterialCollectedSpecimenTypesHistory");

                    b.Navigation("MaterialGSDInfo");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformation", b =>
                {
                    b.Navigation("CollectedSpecimenTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialLaboratoryAnalysisInformationHistory", b =>
                {
                    b.Navigation("CollectedSpecimenTypes");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialProduct", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("BookingFormsHistory");

                    b.Navigation("MaterialShippingInformations");

                    b.Navigation("MaterialShippingInformationsHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformation", b =>
                {
                    b.Navigation("MaterialClinicalDetails");

                    b.Navigation("MaterialLaboratoryAnalysisInformation");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialShippingInformationHistory", b =>
                {
                    b.Navigation("MaterialClinicalDetailsHistory");

                    b.Navigation("MaterialLaboratoryAnalysisInformationHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialType", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.MaterialUsagePermission", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.PriorityRequestType", b =>
                {
                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("SMTA1WorkflowEmails");

                    b.Navigation("SMTA2WorkflowEmails");

                    b.Navigation("UserRequests");

                    b.Navigation("Users");

                    b.Navigation("UsersHistory");

                    b.Navigation("WorklistFromBioHubEmails");

                    b.Navigation("WorklistToBioHubEmails");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowHistoryItem", b =>
                {
                    b.Navigation("SMTA1WorkflowHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA1WorkflowItem", b =>
                {
                    b.Navigation("SMTA1WorkflowHistoryItems");

                    b.Navigation("SMTA1WorkflowItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowHistoryItem", b =>
                {
                    b.Navigation("SMTA2WorkflowHistoryItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SMTA2WorkflowItem", b =>
                {
                    b.Navigation("SMTA2WorkflowHistoryItems");

                    b.Navigation("SMTA2WorkflowItemDocuments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.SpecimenType", b =>
                {
                    b.Navigation("CollectedSpecimenTypes");

                    b.Navigation("CollectedSpecimenTypesHistory");

                    b.Navigation("MaterialCollectedSpecimenTypes");

                    b.Navigation("MaterialCollectedSpecimenTypesHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TemperatureUnitOfMeasure", b =>
                {
                    b.Navigation("MaterialLaboratoryAnalysisInformation");

                    b.Navigation("MaterialLaboratoryAnalysisInformationHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TransportCategory", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("BookingFormsHistory");

                    b.Navigation("MaterialShippingInformations");

                    b.Navigation("MaterialShippingInformationsHistory");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.TransportMode", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("BookingFormsHistory");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.User", b =>
                {
                    b.Navigation("BookingFormCourierUsers");

                    b.Navigation("BookingFormCourierUsersHistory");

                    b.Navigation("BookingFormPickupUsers");

                    b.Navigation("BookingFormPickupUsersHistory");

                    b.Navigation("DocumentTemplates");

                    b.Navigation("Materials");

                    b.Navigation("MaterialsHistory");

                    b.Navigation("Resources");

                    b.Navigation("SMTA1WorkflowHistoryItems");

                    b.Navigation("SMTA1WorkflowItems");

                    b.Navigation("SMTA2WorkflowHistoryItems");

                    b.Navigation("SMTA2WorkflowItems");

                    b.Navigation("UsersHistory");

                    b.Navigation("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2Comments");

                    b.Navigation("WorklistFromBioHubHistoryItemFeedbacks");

                    b.Navigation("WorklistFromBioHubHistoryItemLaboratoryFocalPoints");

                    b.Navigation("WorklistFromBioHubHistoryItems");

                    b.Navigation("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2Comments");

                    b.Navigation("WorklistFromBioHubItemFeedbacks");

                    b.Navigation("WorklistFromBioHubItemLaboratoryFocalPoints");

                    b.Navigation("WorklistFromBioHubItems");

                    b.Navigation("WorklistToBioHubHistoryItemBioHubFacilityFocalPoints");

                    b.Navigation("WorklistToBioHubHistoryItemFeedbacks");

                    b.Navigation("WorklistToBioHubHistoryItemLaboratoryFocalPoints");

                    b.Navigation("WorklistToBioHubHistoryItems");

                    b.Navigation("WorklistToBioHubItemBioHubFacilityFocalPoints");

                    b.Navigation("WorklistToBioHubItemFeedbacks");

                    b.Navigation("WorklistToBioHubItemLaboratoryFocalPoints");

                    b.Navigation("WorklistToBioHubItems");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubHistoryItem", b =>
                {
                    b.Navigation("BookingFormsHistory");

                    b.Navigation("MaterialShippingInformationsHistory");

                    b.Navigation("Shipments");

                    b.Navigation("WorklistFromBioHubHistoryItemAnnex2OfSMTA2Conditions");

                    b.Navigation("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2Comments");

                    b.Navigation("WorklistFromBioHubHistoryItemBiosafetyChecklistOfSMTA2s");

                    b.Navigation("WorklistFromBioHubHistoryItemDocuments");

                    b.Navigation("WorklistFromBioHubHistoryItemFeedbacks");

                    b.Navigation("WorklistFromBioHubHistoryItemLaboratoryFocalPoints");

                    b.Navigation("WorklistFromBioHubHistoryItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistFromBioHubItem", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("Shipments");

                    b.Navigation("WorklistFromBioHubHistoryItems");

                    b.Navigation("WorklistFromBioHubItemAnnex2OfSMTA2Conditions");

                    b.Navigation("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2Comments");

                    b.Navigation("WorklistFromBioHubItemBiosafetyChecklistOfSMTA2s");

                    b.Navigation("WorklistFromBioHubItemDocuments");

                    b.Navigation("WorklistFromBioHubItemFeedbacks");

                    b.Navigation("WorklistFromBioHubItemLaboratoryFocalPoints");

                    b.Navigation("WorklistFromBioHubItemMaterials");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubHistoryItem", b =>
                {
                    b.Navigation("BookingFormsHistory");

                    b.Navigation("MaterialShippingInformationsHistory");

                    b.Navigation("Shipments");

                    b.Navigation("WorklistToBioHubHistoryItemBioHubFacilityFocalPoints");

                    b.Navigation("WorklistToBioHubHistoryItemDocuments");

                    b.Navigation("WorklistToBioHubHistoryItemFeedbacks");

                    b.Navigation("WorklistToBioHubHistoryItemLaboratoryFocalPoints");
                });

            modelBuilder.Entity("WHO.BioHub.Models.Models.WorklistToBioHubItem", b =>
                {
                    b.Navigation("BookingForms");

                    b.Navigation("MaterialShippingInformations");

                    b.Navigation("Shipments");

                    b.Navigation("WorklistToBioHubHistoryItems");

                    b.Navigation("WorklistToBioHubItemBioHubFacilityFocalPoints");

                    b.Navigation("WorklistToBioHubItemDocuments");

                    b.Navigation("WorklistToBioHubItemFeedbacks");

                    b.Navigation("WorklistToBioHubItemLaboratoryFocalPoints");

                    b.Navigation("WorklistToBioHubItemMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
