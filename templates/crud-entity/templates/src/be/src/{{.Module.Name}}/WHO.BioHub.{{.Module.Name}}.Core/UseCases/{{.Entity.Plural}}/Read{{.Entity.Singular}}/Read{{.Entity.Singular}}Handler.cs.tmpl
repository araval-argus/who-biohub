using FluentValidation.Results;
using Microsoft.Extensions.Logging;
using WHO.BioHub.Models.Models;
using WHO.BioHub.Models.Repositories.{{.Entity.Plural}};
using WHO.BioHub.Shared.Utils;

namespace WHO.BioHub.{{.Module.Name}}.Core.UseCases.{{.Entity.Plural}}.Read{{.Entity.Singular}};

public interface IRead{{.Entity.Singular}}Handler
{
    Task<Either<Read{{.Entity.Singular}}QueryResponse, Errors>> Handle(Read{{.Entity.Singular}}Query query, CancellationToken cancellationToken);
}

public class Read{{.Entity.Singular}}Handler : IRead{{.Entity.Singular}}Handler
{
    private readonly ILogger<Read{{.Entity.Singular}}Handler> _logger;
    private readonly Read{{.Entity.Singular}}QueryValidator _validator;
    private readonly I{{.Entity.Singular}}ReadRepository _readRepository;

    public Read{{.Entity.Singular}}Handler(
        ILogger<Read{{.Entity.Singular}}Handler> logger,
        Read{{.Entity.Singular}}QueryValidator validator,
        I{{.Entity.Singular}}ReadRepository readRepository)
    {
        _logger = logger;
        _validator = validator;
        _readRepository = readRepository;
    }

    public async Task<Either<Read{{.Entity.Singular}}QueryResponse, Errors>> Handle(
        Read{{.Entity.Singular}}Query query,
        CancellationToken cancellationToken)
    {
        ValidationResult validationResult = await _validator.ValidateAsync(query, cancellationToken);
        if (!validationResult.IsValid)
            return new(new Errors(validationResult));

        try
        {
            {{.Entity.Singular}} {{.Entity.Singular | lower}} = await _readRepository.Read(query.Id, cancellationToken);
            if ({{.Entity.Singular | lower}} == null)
                return new(new Errors(ErrorType.NotFound, $"{{.Entity.Singular}} with Id {query.Id} not found"));

            return new(new Read{{.Entity.Singular}}QueryResponse({{.Entity.Singular | lower}}));
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error reading {{.Entity.Singular}} with Id {id}", query.Id);
            throw;
        }
    }
}