using Microsoft.EntityFrameworkCore;
using WHO.BioHub.Models.Models;
using WHO.BioHub.Models.Repositories.{{.Entity.Plural}};
using WHO.BioHub.Shared.Utils;

namespace WHO.BioHub.DAL.Repositories;

public class SQL{{.Entity.Singular}}WriteRepository : I{{.Entity.Singular}}WriteRepository
{
    private readonly BioHubDbContext _dbContext;
    private DbSet<{{.Entity.Singular}}> {{.Entity.Plural}} => _dbContext.{{.Entity.Plural}};

    public SQL{{.Entity.Singular}}WriteRepository(BioHubDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<Either<{{.Entity.Singular}}, Errors>> Create({{.Entity.Singular}} {{.Entity.Singular | lower}}, CancellationToken cancellationToken)
    {
        await _dbContext.AddAsync({{.Entity.Singular | lower}}, cancellationToken);
        await _dbContext.SaveChangesAsync(cancellationToken);
        return new({{.Entity.Singular | lower}});
    }

    public async Task<Errors?> Delete(Guid id, CancellationToken cancellationToken)
    {
        {{.Entity.Singular}} lab = await {{.Entity.Plural}}.FirstOrDefaultAsync(l => l.DeletedOn == null && l.Id == id, cancellationToken);
        lab.DeletedOn = DateTime.Now;
        {{.Entity.Plural}}.Update(lab);

        await _dbContext.SaveChangesAsync(cancellationToken);
        return null;
    }

    public async Task<{{.Entity.Singular}}> ReadForUpdate(Guid id, CancellationToken cancellationToken)
    {
        return await _dbContext.{{.Entity.Plural}}
            .FirstOrDefaultAsync(l => l.DeletedOn == null && l.Id == id, cancellationToken);
    }

    public async Task<Errors?> Update({{.Entity.Singular}} {{.Entity.Singular | lower}}, CancellationToken cancellationToken)
    {
        {{.Entity.Plural}}.Update({{.Entity.Singular | lower}});
        await _dbContext.SaveChangesAsync(cancellationToken);

        return null;
    }
}